var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');

/* Use SMP-aware version of SysMin and LoggerBuf */
var SysMin = xdc.useModule('ti.sysbios.smp.SysMin');
var LoggerBuf = xdc.useModule('ti.sysbios.smp.LoggerBuf');

/* Enable SMP mode */
BIOS.smpEnabled = true;

/* Enable USER1 logs in the Task module */
Task.common$.diags_USER1 = Diags.RUNTIME_ON;

/* Configure LoggerBuf to not flush logs */
LoggerBuf.enableFlush = false;
LoggerBuf.TimestampProxy = xdc.useModule('xdc.runtime.Timestamp');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x400000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

if (Program.cpu.deviceName.match(/TCI6636K2H/)) {
	var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
    Timestamp.SupportProxy = xdc.useModule('ti.sysbios.timers.timer64.TimestampProvider');

    /* Set the frequency of the timer64 to match the hardware frequency based upon:
       - The input clock frequency being 122.88 MHz.
       - The xtcievmk2x_arm.gel setting the SYSCLK1 PLL to 8 times the input clock frequency.
       - The timer64 uses (SYSCLK1 PLL / 6) as the timer frequency (the division is fixed for the 66AK2H14). */
    var Timer = xdc.useModule('ti.sysbios.timers.timer64.Timer');
    var clkInFreq = 122880000;
    var sysClkPllFreq = clkInFreq * 8;
    var timer64ClkFreq = sysClkPllFreq / 6;
    for (var i = 0; i < Timer.intFreqs.length; i++)
    {
        Timer.intFreqs[i].lo = timer64ClkFreq;
    }
	
	var Core = xdc.useModule('ti.sysbios.family.arm.a15.smp.Core');
	Core.useSkernelCmd = false; /* Set to false if running in CCS and using gel files to wake-up secondary cores */
	Core.numCores = 4;
}

xdc.useModule('ti.sysbios.posix.Settings');

System.extendedFormats = "%f%$S";

var CpIntc = xdc.useModule('ti.sysbios.family.arm.a15.tci66xx.CpIntc');

/* ================ Driver configuration ================ */

var socType = "k2h";

/*use CSL package*/
var Csl = xdc.useModule('ti.csl.Settings');
Csl.deviceType = socType;

/* Load the osal package -- required by board & interrupt example */
var osType = "tirtos"
var Osal = xdc.loadPackage('ti.osal');
Osal.Settings.osType = osType;
Osal.Settings.socType = socType;

/* Load the I2C package  - required by board */
var I2c = xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType = socType;

/* Load the uart package -- required by board */
var Uart = xdc.loadPackage('ti.drv.uart');
Uart.Settings.socType = socType;

/* Load the gpio package */
var Gpio = xdc.loadPackage('ti.drv.gpio');
Gpio.Settings.socType = socType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "evmK2H";
