1. Using unmodified example
===========================

This has UDPPACKETSIZE set to 1472 which is the maximum UDP payload size in one Ethernet frame.

With a ping size of the maximum for one Ethernet frame then successfull:
$ ping 192.168.0.5 -s 1474
PING 192.168.0.5 (192.168.0.5) 1474(1502) bytes of data.
1482 bytes from 192.168.0.5: icmp_seq=1 ttl=255 time=0.703 ms

Increasing the ping size by one byte fails:
$ ping 192.168.0.5 -s 1475
PING 192.168.0.5 (192.168.0.5) 1475(1503) bytes of data.
1483 bytes from 192.168.0.5: icmp_seq=1 ttl=255 time=0.736 ms
wrong data byte #1474 should be 0xc2 but was 0x7d

This causes the ICMP payload to be split into two Ethernet frames, and Wireshark reports the transmitted ICMP checksum
is invalid.

The maximum ping size which generates a response is 3012.
A ping size of 3013 causes NDK_ips.Fragdropped to increment.
This appears related to the DEF_IP_REASM_MAXSIZE of 3020
	

A UDP packet size of 1472 works:
$ /mnt/windows/ti/tirtos_cc13xx_cc26xx_2_21_01_08/packages/examples/tools/udpSendReceive 192.168.0.5 1000 1 -s0 -l1472
Starting test with a 0 uSec delay between transmits
[id 1] count = 1000, time = 1
[id 1] count = 2000, time = 1

Increasing the size by one byte results in no response.


2. Incease UDP buffering
========================

Buffering changes for the application
a. Increase UDPPACKETSIZE from 1472 to 4000
b. Increase stack size to allow for the larger UDPPACKETSIZE on the stack in echoFxn()
c. The syscfg General.udpRxBufSize has been doubled from 2048 to 4096 to allow the larger packets to be received.

Of trying udpSendReceive:
a. Size of 1472 works.
b. Size of 3013 results in no response, and causes NDK_ips.Fragdropped to increment.
   This appears releated to the DEF_IP_REASM_MAXSIZE of 3020
c. Size of 1473 causes the echoFxn() to exit with an error:
     Error: sendto failed (bytesRcvd=1473 bytesSent=-1)
d. Size of 3012 causes the echoFxn() to exit with an error: 
     Error: sendto failed (bytesRcvd=3012 bytesSent=-1)

     
3. Remove UdpOutput() which was reporting an error attempting to send fragmented packets
========================================================================================

Add a modified simplelink udp.c file to the project, to stop sendto() from returning an error if attempt to send a UDP
packet which needs to be fragmented.
 
$ git diff ~/ti/simplelink_msp432e4_sdk_4_20_00_12/source/ti/ndk/stack/udp/udp.c simplelink_modified_files/udp.c | cat
diff --git a/home/mr_halfword/ti/simplelink_msp432e4_sdk_4_20_00_12/source/ti/ndk/stack/udp/udp.c b/simplelink_modified_files/udp.c
index 6036ce1..c853663 100644
--- a/home/mr_halfword/ti/simplelink_msp432e4_sdk_4_20_00_12/source/ti/ndk/stack/udp/udp.c
+++ b/simplelink_modified_files/udp.c
@@ -163,11 +163,13 @@ int UdpOutput( void *hSock, unsigned char *buf, int32_t size, int32_t *pRetSize
 
     mss -= SockGetIpHdrSize(hSock) + UDPHDR_SIZE;   /* Sub off IpHdr & UdpHdr */
 
+    /* This check has been commnted out since the IPTxPacket() called later can handle transmitting fragmented packets.
     if( size > mss )
     {
         error = NDK_EMSGSIZE;
         goto UDP_EXIT;
     }
+    */
 
     /* Create the packet */
     /* Payload = size */



Of trying udpSendReceive:
a. Size of 1472 works.
b. Size of 3013 results in no response, and causes NDK_ips.Fragdropped to increment.
c. Size of 1473 fails, due to the transmitted packets have an invalid UDP checksum.
d. Size of 3012 fails, due to the transmitted packets have an invalid UDP checksum.


4. Add modified EMACMSP432E4.c driver which only enables hardware checksum offload for IP headers
================================================================================================= 

The reason for this modification is that the hardware checksum offload can only work on UDP/ICMP/TCP payloads which are
fragmented. While TCP payloads aren't expected to the fragmented due to taking account of the MTU, the hardware doesn't
allow UDP/ICMP/TCP payloads checksum offload to be controlled independently for different protocols.

To select hardware/software checksum calculation on a packet-by-packet basis according to if the payload needed to be
fragmented looks to be require more changes in the NDK code (which is shared among different devices?)

Also, this program isn't testing TCP. 

$ git diff ~/ti/simplelink_msp432e4_sdk_4_20_00_12/source/ti/drivers/emac/EMACMSP432E4.c simplelink_modified_files/EMACMSP432E4.c | cat
diff --git a/home/mr_halfword/ti/simplelink_msp432e4_sdk_4_20_00_12/source/ti/drivers/emac/EMACMSP432E4.c b/simplelink_modified_files/EMACMSP432E4.c
index 221e206..d63c153 100644
--- a/home/mr_halfword/ti/simplelink_msp432e4_sdk_4_20_00_12/source/ti/drivers/emac/EMACMSP432E4.c
+++ b/simplelink_modified_files/EMACMSP432E4.c
@@ -232,8 +232,13 @@ static void EMACMSP432E4_processPendingTx()
         pDesc->Desc.pvBuffer1 = pBuffer;
         pDesc->Desc.ui32CtrlStatus = DES0_TX_CTRL_FIRST_SEG;
 
+        /*
+         * The MSP432E EMAC only operates on single frames, with the software being responsible for fragmenting IP packets which
+         * are too large for one Ethernet frame. The MSP432E EMAC Checksum Offload is therefore unable to generate or check the
+         * payload of a packet which is fragmented into multiple Ethernet frames.
+         */
         pDesc->Desc.ui32CtrlStatus |=
-                (DES0_TX_CTRL_IP_ALL_CKHSUMS | DES0_TX_CTRL_CHAINED);
+                (DES0_TX_CTRL_IP_HDR_CHKSUM | DES0_TX_CTRL_CHAINED);
         pDesc->Desc.ui32CtrlStatus |= (DES0_TX_CTRL_LAST_SEG |
                                        DES0_TX_CTRL_INTERRUPT);
         EMACMSP432E4_private.pTxDescList->ulWrite++;
@@ -1079,9 +1084,14 @@ int EMACMSP432E4_NIMUInit(STKEVENT_Handle hEvent)
     device->mtu         = ETH_MAX_PAYLOAD - ETHHDR_SIZE;
     device->pvt_data    = (void *)&EMACMSP432E4_private;
 
-    /* Inform upper layers that this driver enables Checksum Offloading */
-    device->flags = NIMU_DEVICE_ENABLE_HW_CHKSM_TX_ALL |
-                    NIMU_DEVICE_ENABLE_HW_CHKSM_RX_ALL;
+    /* Inform upper layers that this driver enables IP Checksum Offloading.
+     *
+     * The MSP432E EMAC only operates on single frames, with the software being responsible for fragmenting IP packets which
+     * are too large for one Ethernet frame. The MSP432E EMAC Checksum Offload is therefore unable to generate or check the
+     * payload of a packet which is fragmented into multiple Ethernet frames.
+     */
+    device->flags = NIMU_DEVICE_ENABLE_HW_CHKSM_TX_IP |
+                    NIMU_DEVICE_ENABLE_HW_CHKSM_RX_IP;
 
     /* Populate the Driver Interface Functions. */
     device->start       = EMACMSP432E4_emacStart;


Testing udpSendReceive:
a. The following sizes now work:
   1472 : payload in one frame
   1473 : payload in two frames
   3012 : payload in three frames
b. Size of 3013 results in no response, and causes NDK_ips.Fragdropped to increment.

Testing ping:
a. The following sizes now work:
   1472 : payload in one frame
   1473 : payload in two frames
   3012 : payload in three frames
b. Size of 3013 results in no response, and causes NDK_ips.Fragdropped to increment.
   